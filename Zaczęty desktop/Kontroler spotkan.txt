package application;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;

import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.cell.PropertyValueFactory;

public class MeetingsController {

	@FXML
	private TableView<Meeting> meetingsTable;

	@FXML
	private TableColumn<Meeting, String> meetingIdColumn;

	@FXML
	private TableColumn<Meeting, String> meetingDateColumn;

	@FXML
	private TableColumn<Meeting, String> userColumn;

	@FXML
	private TextArea meetingsResult;

	@FXML
	private Button saveButton;

	@FXML
	void initialize() {
		assert meetingsTable != null : "fx:id=\"meetingsTable\" was not injected: check your FXML file 'meetings.fxml'.";
		assert meetingsResult != null : "fx:id=\"meetingsResult\" was not injected: check your FXML file 'meetings.fxml'.";
		assert saveButton != null : "fx:id=\"saveButton\" was not injected: check your FXML file 'meetings.fxml'.";

		final ObservableList<Meeting> data = FXCollections.observableArrayList();

		meetingsTable.setItems(data);

		meetingIdColumn.setCellValueFactory(new PropertyValueFactory<Meeting, String>("meetingId"));
		meetingDateColumn.setCellValueFactory(new PropertyValueFactory<Meeting, String>("startDate"));
		userColumn.setCellValueFactory(new PropertyValueFactory<Meeting, String>("user"));

		try {
			// create a java mysql database connection
			String myDriver = "org.gjt.mm.mysql.Driver";
			String myUrl = "jdbc:mysql://sql.rafalkaczmar.nazwa.pl:3306/rafalkaczmar_Lekarz";
			Class.forName(myDriver);
			Connection conn = DriverManager.getConnection(myUrl, "rafalkaczmar_Lekarz", "Mango1996");

			CallableStatement cs = conn.prepareCall(
					"select m.id, m.startDate, concat(u.username_canonical, ' ', u.pesel) as username from meeting m inner join user u on (m.user_id = u.id)");
			ResultSet rs = cs.executeQuery();

			SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");

			while (rs.next()) {
				data.add(new Meeting(rs.getInt("id"), sdf.format(rs.getDate("startDate")), rs.getString("username")));
			}

			conn.close();

			meetingsTable.refresh();
		} catch (Exception e) {
			System.err.println("Got an exception! ");
			System.err.println(e.getMessage());
		}
		
		meetingsTable.setOnMouseClicked(e -> {
			final Meeting selectedMeeting = meetingsTable.getSelectionModel().getSelectedItem();
			
			System.out.println(selectedMeeting.meetingId);

			try {
				String myDriver = "org.gjt.mm.mysql.Driver";
				String myUrl = "jdbc:mysql://sql.rafalkaczmar.nazwa.pl:3306/rafalkaczmar_Lekarz";
				Class.forName(myDriver);
				Connection conn = DriverManager.getConnection(myUrl, "rafalkaczmar_Lekarz", "Mango1996");

				CallableStatement cs = conn
						.prepareCall("select meetingResult from meeting where id = " + selectedMeeting.getMeetingId());
				ResultSet rs = cs.executeQuery();
				rs.next();

				meetingsResult.setText(rs.getString("meetingResult"));

				conn.close();
			} catch (Exception ex) {
				System.err.println("Got an exception! ");
				System.err.println(ex.getMessage());
			}
		});
	}

	@FXML
	void saveButtonAction(ActionEvent event) {
		final Meeting selectedMeeting = meetingsTable.getSelectionModel().getSelectedItem();
		
		System.out.println(selectedMeeting.meetingId);

		try {
			String myDriver = "org.gjt.mm.mysql.Driver";
			String myUrl = "jdbc:mysql://sql.rafalkaczmar.nazwa.pl:3306/rafalkaczmar_Lekarz";
			Class.forName(myDriver);
			Connection conn = DriverManager.getConnection(myUrl, "rafalkaczmar_Lekarz", "Mango1996");

			PreparedStatement cs = conn
					.prepareStatement("UPDATE meeting SET meetingResult=? WHERE id=?");
			cs.setString(1, meetingsResult.getText());
			cs.setInt(2, selectedMeeting.getMeetingId());
			
			cs.execute();

			conn.close();
		} catch (Exception e) {
			System.err.println("Got an exception! ");
			System.err.println(e.getMessage());
		}
	}

	public static class Meeting {

		private final int meetingId;
		private final String startDate;
		private final String user;

		public Meeting(int meetingId, String startDate, String user) {
			super();
			this.meetingId = meetingId;
			this.startDate = startDate;
			this.user = user;
		}

		public int getMeetingId() {
			return meetingId;
		}

		public String getStartDate() {
			return startDate;
		}

		public String getUser() {
			return user;
		}
	}

}
